provider.tf===================================
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.59.0"
    }
  }
}

provider "aws" {
  region     = "us-west-1"
  access_key = "abscd"
  secret_key = "abcddd"
}

terraform init
=======================================================
ec2.tf
resource "aws_instance" "example" {

  ami           = "ami-04a81a99f5ec58529" # Replace with a valid AMI ID for your region
  instance_type = "t2.micro"

  tags = {
    Name = "server-1"
  }
}

output "instance_id" {


======================================================


terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "5.59.0"
    }
  }
}

provider "aws" {
  region = "us-west-1"
}

resource "aws_instance" "webserver" {
  count         = 4
  ami           = "ami-04a81a99f5ec58529" # Replace with a valid AMI ID for your region
  instance_type = "t2.micro"

  tags = {
    Name = "server-${count.index + 1}" # Name each instance with an index starting from 1
  }
}

output "public_ips" {
  value = [for instance in aws_instance.webserver : instance.public_ip]
}

===================================================================================================

terraform destroy -target=aws_instance.webserver[2]

=================================================================================================================

data "aws_vpc" "default" {
  default = true
}

resource "aws_security_group" "web_sg" {
  name        = "web_sg"
  description = "Allow SSH and HTTPS inbound traffic"
  vpc_id      = data.aws_vpc.default.id

  ingress {
    description = "Allow SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "webserver" {
  count             = 1
  ami               = "ami-0427090fd1714168b" # Replace with a valid AMI ID for us-west-1
  instance_type     = "t2.nano"
  key_name          = "MANTO" # Ensure this matches the key pair name in AWS, without the .pem extension
  availability_zone = "us-east-1b"

  vpc_security_group_ids = [aws_security_group.web_sg.id] # Associate the security group

  tags = {
    Name = "server-${count.index + 1}" # Name each instance with an index starting from 1
  }
}

output "aws_instance_public_ip" {
  value = aws_instance.webserver[0].public_ip
}

output "aws_instance_public_dns" {
  value = aws_instance.webserver[0].public_dns
}

output "aws_instance_private_ip" {
  value = aws_instance.webserver[0].private_ip
}

output "aws_instance_private_dns" {
  value = aws_instance.webserver[0].private_dns
}

output "aws_instance_id" {
  value = aws_instance.webserver[0].id
}

output "aws_instance_ami" {
  value = aws_instance.webserver[0].ami
}

output "aws_instance_type" {
  value = aws_instance.webserver[0].instance_type
}

output "aws_instance_availability_zone" {
  value = aws_instance.webserver[0].availability_zone
}

output "aws_instance_subnet_id" {
  value = aws_instance.webserver[0].subnet_id
}

output "aws_instance_vpc_security_group_ids" {
  value = aws_instance.webserver[0].vpc_security_group_ids
}

output "aws_instance_network_interface" {
  value = aws_instance.webserver[0].network_interface
}

for multipel output use----
================================================================================
for s3 bucket creation------------------





